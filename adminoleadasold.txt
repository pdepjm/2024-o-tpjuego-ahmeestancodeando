import slime.*
import wollok.game.*
import administradorDeEnemigos.*
import casa.*


//Ver como hacer q llame a cada oleada
object adminOleadas {
    var property oleada = oleadaInicial 
    var property numeroOleada = 1
    
    const numOleadaFinal = 2

    method position() = game.at(10, 5)
    method text() = "Oleada: " + numeroOleada.toString() +"     " + "Slimes Restantes: " + enemigosRestantes.toString() + tipoEnemigos.toString() + enemigosGenerados.toString()
    method textColor() = "#FA0770"

    method inicioOleada() = game.sound("m.inicioOleada.mp3")
    method finOleada() = game.sound("m.finOleada.mp3")

method iniciarOleada(){
    //Delay para generar enemigos constantemente sin cortar
    //Ver como hacer que genere constantemente sin cortar
    //Genera enemigos de la oleada actual mientras haya enemigos restantes
    //Si se generaron todos los enemigos de la oleada, se llama a setear la proxima oleada
    //Si no hay enemigos restantes, se agrega un nuevo enemigo aleatorio de la lista
    game.onTick(
      tiempoSpawn,
      "generar nuevo Enemigo",
      { 
        if(cantidadEnemigos > enemigosGenerados && enemigosRestantes > 0){
            //Genera un nuevo enemigo de la lista y lo agrega a la cantidad de enemigos generados
            
            administradorDeEnemigos.generarEnemigo(tipoEnemigos.anyOne())

            //Decrementa la cantidad de enemigos restantes

        } else if (enemigosRestantes == 0 && enemigosGenerados == cantidadEnemigos){
            //Si se generaron todos los enemigos de la oleada, se llama a setear la proxima oleada
            //Limpia la lista de enemigos porque???
            tipoEnemigos = []
            //Llama a setear la proxima oleada
            game.schedule(20000, {self.siguienteOleada()})
            //Decrementa la cantidad de enemigos generados
            enemigosGenerados = 0
            self.finOleada().volume(0.1)
            self.finOleada().play()
        }  


       }
    )

}

method siguienteOleada(){
    enemigosGenerados = 0
    self.inicioOleada().volume(0.0001)
    self.inicioOleada().play()
    // remuevo el evento que generaba enemigos en la oleada anterior
    game.removeTickEvent("agregar enemigo")
    // remuevo el evento que generaba el enemigo en la oleada anterior
    game.removeTickEvent("generar nuevo Enemigo")
    // aumento la cantidad de enemigos en la siguiente oleada
    cantidadEnemigos +=5 
    //definir escalado de oleadas (por ahora es 5 enemigos mas por oleada)
    // aumento el numero de oleada en 1
    numeroOleada +=1
    
    //Agrega un nuevo enemigo aleatorio de la lista
    if (tipoEnemigos.size() < 4) {tipoEnemigos.add(adminTipoOleada.agregarTipo(numeroOleada))}
    
    


    if(numeroOleada==numOleadaFinal){
        tipoEnemigos=[slimeBlessed]
        //cantidadEnemigos=10
    }

    // reseteo el contador de enemigos restantes en la oleada
    enemigosRestantes = cantidadEnemigos
    
    // si el tiempo de spawn es mayor a 400, lo decreo en 400 para que se vayan spawnando mas rapido
    if (tiempoSpawn >400)  //Puede llegar a negativo??
        tiempoSpawn -= 400

    // inicio la siguiente oleada
    if(numeroOleada<=numOleadaFinal){
    self.iniciarOleada() 
    }else if(numeroOleada>numOleadaFinal) casa.terminarJuego(pantallaVictoria)
    
}

method reducirEnemigos() { enemigosRestantes-=1}

method sumarEnemigo() {enemigosGenerados += 1}


}
class Oleada {
    var enemigos = []
    var cantidadEnemigos = 10
    var property enemigosRestantes = 10
    var property enemigosGenerados = 0
    var tiempoSpawn = 3000
}
object oleadaFinal() inherits Oleada (enemigos = [blessedSlime], ) {
    method pepe {
    // remuevo el evento que generaba enemigos en la oleada anterior
    game.removeTickEvent("agregar enemigo")
    // remuevo el evento que generaba el enemigo en la oleada anterior
    game.removeTickEvent("generar nuevo Enemigo")
    // aumento la cantidad de enemigos en la siguiente oleada
    cantidadEnemigos = 5 
    //definir escalado de oleadas (por ahora es 5 enemigos mas por oleada)
    
    // aumento el numero de oleada en 1
    numeroOleada +=1
    
    // reseteo el contador de enemigos restantes en la oleada
    enemigosRestantes = cantidadEnemigos

    tipoEnemigos = [slimeGuerrero] //Definir enemgigo de oleada final

    self.iniciarOleada() 

    }
     method resetOleada(){
    tipoEnemigos = [slimeBasico]
    cantidadEnemigos = 10
    numeroOleada = 1
    tiempoSpawn = 3000
    enemigosRestantes = 10
    enemigosGenerados = 0
 }
 
}

 